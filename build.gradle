buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
        
    }
}
apply plugin: 'java'
apply plugin: 'eclipse'
//apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

bootWar {
    baseName = 'ROOT'
    version =  ''
}

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.json:json:20160810")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
//     compile("org.springframework.boot:spring-boot-starter-data-jpa")
//     compile("org.springframework.boot:spring-boot-configuration-processor")
//     compile("org.springframework.boot:spring-boot-devtools")
//    compile("org.springframework.boot:spring-boot-starter-tomcat")
//    compile("org.springframework.boot:spring-boot-starter-tomcat:provided")

}

task buildFrontend { ->

    doLast{
            def command = [ "npm" , 'install' ]
            exec {
                workingDir "frontend"
                commandLine command
                project.logger.lifecycle( "  > ${command.join(" ")}")
            }

           command = [ "npm" , 'run' , 'build' ]
            exec {
                workingDir "frontend"
                commandLine command
                project.logger.lifecycle( "  > ${command.join(" ")}")
            }

            command = [ "cp" , '-R' , 'frontend/dist/' , "src/main/webapp/" ]
            exec {
                commandLine command
                project.logger.lifecycle( "  > ${command.join(" ")}")
            }
    }
}
build.dependsOn(buildFrontend)

