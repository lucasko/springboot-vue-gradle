buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
        
    }
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

bootJar {
    baseName = 'my-spring-boot'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

dependencies {

//   	 compile("mysql:mysql-connector-java:8.0.11")
   	 compile("org.springframework.boot:spring-boot-starter-web")
//     compile("org.springframework.boot:spring-boot-starter-data-jpa")
     compile("org.springframework.boot:spring-boot-configuration-processor")
     compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
//    compile("org.springframework.boot:spring-boot-starter-tomcat:provided")
     compile("org.springframework.boot:spring-boot-starter-web")
     compile("org.springframework.boot:spring-boot-starter-test")
     compile("org.json:json:20160810")

 	 compile("org.springframework.boot:spring-boot-starter-amqp:2.1.4.RELEASE")
     testCompile("junit:junit")



}

task buildFrontend { ->

    doLast{
            def command = [ "npm" , 'run' , 'build' ]
            exec {
                workingDir "frontend"
                commandLine command
                project.logger.lifecycle( "  > ${command.join(" ")}")
            }

            command = [ "cp" , '-R' , 'frontend/dist/' , "src/main/webapp/" ]
            exec {
                commandLine command
                project.logger.lifecycle( "  > ${command.join(" ")}")
            }
    }
}
build.dependsOn(buildFrontend)

